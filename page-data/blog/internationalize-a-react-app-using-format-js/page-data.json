{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/internationalize-a-react-app-using-format-js","result":{"pageContext":{"content":"<p>First we'll need to install FormatJS for our project.</p>\n<pre><code>npm install react-intl\n</code></pre>\n<p>Let's start by creating translation files. We'll focus on English (<code>en</code>) and Hindi (<code>hi</code>) messages for now. Let's create a directory <code>src/translations</code> and place <code>en.json</code> and <code>hi.json</code> there.</p>\n<h4><code>src/translations/en.json</code></h4>\n<pre><code class=\"language-json\">{\n  \"welcome\": \"Welcome to FormatJS demo!\",\n  \"footer\": \"Created using Create-React-App..\"\n}\n</code></pre>\n<h4><code>src/translations/hi.json</code></h4>\n<pre><code class=\"language-json\">{\n  \"welcome\": \"FormatJS डेमो में आपका स्वागत है!\",\n  \"footer\": \"Create-React-App का उपयोग करके बनाया गया.\"\n}\n</code></pre>\n<p>Now, let's setup our app to include these messages. We initialize the messages and wrap our app using <code>&#x3C;IntlProvider></code> in <code>index.js</code>.</p>\n<h4><code>src/index.js</code></h4>\n<pre><code class=\"language-js\">...\nimport { IntlProvider } from 'react-intl';\nimport messages_en from './translations/en.json';\nimport messages_hi from './translations/hi.json';\n\nconst messages = {\n  en: messages_en,\n  hi: messages_hi\n};\n\nconst language = navigator.language.split(/[-_]/)[0];\n...\nReactDOM.render(\n  &#x3C;IntlProvider locale={language} messages={messages[language]}>\n    &#x3C;App />\n  &#x3C;/IntlProvider>,\n  document.getElementById('root')\n);\n...\n</code></pre>\n<p>Now, these messages can be accessed in <code>App.js</code>.</p>\n<h4><code>src/App.js</code></h4>\n<pre><code class=\"language-js\">...\nimport { FormattedMessage } from \"react-intl\";\n\nfunction App() {\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;header>\n        &#x3C;FormattedMessage id=\"welcome\" defaultMessage=\"Welcome to FormatJS demo!\"/>\n      &#x3C;/header>\n      &#x3C;footer>\n        &#x3C;FormattedMessage id=\"footer\" defaultMessage=\"Created using Create-React-App.\"/>\n      &#x3C;/footer>\n    &#x3C;/div>\n  );\n}\n...\n</code></pre>\n<p>We're using <code>FormattedMessage</code> to auto-translate our text. The <code>id</code> parameter tells FormatJS which message to provide, while <code>defaultMessage</code> acts as a fallback in case we don't support the locale.</p>\n<p>Now our app will display messages based the users locale! We can extend the locale support further by adding more language configs in the future.</p>","frontmatter":{"slug":"/blog/internationalize-a-react-app-using-format-js","title":"Internationalize a React App using FormatJS","date":"August 27th 2020"}}},"staticQueryHashes":[]}