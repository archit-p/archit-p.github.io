{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/collaborative-filtering-based-music-artist-recommendation","result":{"pageContext":{"content":"<h1>Collaborative Filtering Based Music Artist Recommendation</h1>\n<p>This notebook illustrates a technique to recommend similar artists to users based on users music listening history. For this task, I have utilized the Last.fm dataset (<a href=\"http://files.grouplens.org/datasets/hetrec2011/hetrec2011-lastfm-readme.txt\">link</a>), which contains music listening history for 2000 users from Last.fm.</p>\n<h2>Part 1: Loading the Data</h2>\n<p>Data is read from a tab separated file into a list of dictionaries. I am also loading the artist meta so that we can print out artist names instead of the IDs.</p>\n<pre><code class=\"language-python\">from collections import defaultdict\n\nuserArtistPath = \"/Users/archit-p/sources/github/data-science/datasets/hetrec2011-lastfm-2k/user_artists.dat\"\nartistMetaPath = \"/Users/archit-p/sources/github/data-science/datasets/hetrec2011-lastfm-2k/artists.dat\"\n</code></pre>\n<pre><code class=\"language-python\">def loadData():\n    file = open(userArtistPath, 'r')\n\n    header = file.readline()\n    header = header.strip().split('\\t')\n\n    global dataset\n    dataset = []\n    \n    for line in file:\n        fields = line.strip().split('\\t')\n        d = dict(zip(header, fields))\n        d['userID'] = int(d['userID'])\n        d['artistID'] = int(d['artistID'])\n        d['weight'] = int(d['weight'])\n        dataset.append(d)\n</code></pre>\n<pre><code class=\"language-python\">loadData()\n</code></pre>\n<p>Each row of the dataset looks as follows</p>\n<pre><code class=\"language-python\">dataset[0]\n</code></pre>\n<pre><code>{'userID': 2, 'artistID': 51, 'weight': 13883}\n</code></pre>\n<p>Now, loading artist meta for better understanding the results.</p>\n<pre><code class=\"language-python\">def loadMeta():\n    file = open(artistMetaPath, 'r')\n\n    header = file.readline()\n    header = header.strip().split('\\t')\n    \n    global artistMeta\n    artistMeta = defaultdict(dict)\n    \n    for line in file:\n        fields = line.strip().split('\\t')\n        d = dict(zip(header, fields))\n        d['id'] = int(d['id'])\n        artistMeta[d['id']] = d\n</code></pre>\n<pre><code class=\"language-python\">loadMeta()\n</code></pre>\n<pre><code>{'id': 3317, 'name': 'Drake', 'url': 'http://www.last.fm/music/Drake', 'pictureURL': 'http://userserve-ak.last.fm/serve/252/31573727.jpg'}\n</code></pre>\n<p>Artist meta contains the name of artist, profile URL on Last.fm and an image of the artist.</p>\n<pre><code class=\"language-python\">artistMeta[51]\n</code></pre>\n<pre><code>{'id': 51,\n 'name': 'Duran Duran',\n 'url': 'http://www.last.fm/music/Duran+Duran',\n 'pictureURL': 'http://userserve-ak.last.fm/serve/252/155668.jpg'}\n</code></pre>\n<h2>Part 2: Finding Similarities</h2>\n<p>To perform collaborative filtering, I have created set of users for a given artist and set of artists that a particular user has listened to.</p>\n<pre><code class=\"language-python\">usersPerArtist = defaultdict(set)\nartistsPerUser = defaultdict(set)\n\nfor d in dataset:\n    user, artist = d['userID'], d['artistID']\n    usersPerArtist[artist].add(user)\n    artistsPerUser[user].add(artist)\n</code></pre>\n<p>To calculate similarities between sets, I use Jaccard Similarity.</p>\n<pre><code class=\"language-python\">def Jaccard(s1, s2):\n    numer = len(s1.intersection(s2))\n    denom = len(s1.union(s2))\n    return numer / denom\n</code></pre>\n<p>The similarity function rates the artists based on the Jaccard Similarity between the set of users who have listened to the two artists.</p>\n<pre><code class=\"language-python\">def mostSimilar(iD, n):\n    similarities = []\n    users = usersPerArtist[iD]\n    for i2 in usersPerArtist:\n        if i2 == iD: continue\n        sim = Jaccard(users, usersPerArtist[i2])\n        similarities.append((sim,i2))\n    similarities.sort(reverse=True)\n    return similarities[:n]\n</code></pre>\n<h3>Making a recommendation</h3>\n<p>To make a recommendation, the function takes artistID and number of recommendations as input. I'll be using Kanye West as an example.</p>\n<pre><code class=\"language-python\">artistMeta[331]\n</code></pre>\n<pre><code>{'id': 331,\n 'name': 'Kanye West',\n 'url': 'http://www.last.fm/music/Kanye+West',\n 'pictureURL': 'http://userserve-ak.last.fm/serve/252/8942513.jpg'}\n</code></pre>\n<p>The similarity function returns a list of artists along with the similarity score.</p>\n<pre><code class=\"language-python\">mostSimilar(artistMeta[331]['id'], 10)\n</code></pre>\n<pre><code>[(0.22598870056497175, 1613),\n (0.18421052631578946, 468),\n (0.17763157894736842, 527),\n (0.1736111111111111, 475),\n (0.17094017094017094, 329),\n (0.16097560975609757, 907),\n (0.15760869565217392, 327),\n (0.15184381778741865, 295),\n (0.14838709677419354, 547),\n (0.1437125748502994, 330)]\n</code></pre>\n<pre><code class=\"language-python\">[artistMeta[x[1]]['name'] for x in mostSimilar(artistMeta[331]['id'], 10)]\n</code></pre>\n<pre><code>['Jay-Z',\n 'Usher',\n \"Lil' Wayne\",\n 'Eminem',\n 'Justin Timberlake',\n 'Timbaland',\n 'Chris Brown',\n 'Beyonc√©',\n 'Kid Cudi',\n 'T.I.']\n</code></pre>\n<p>Using the artist meta loaded earlier, we can print out the artist info.</p>","frontmatter":{"slug":"/blog/collaborative-filtering-based-music-artist-recommendation","title":"Collaborative Filtering Based Music Artist Recommendation","date":"February 7th 2021"}}},"staticQueryHashes":[]}